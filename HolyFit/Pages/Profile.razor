@page "/Profile"
@attribute [Authorize]
@using HolyFitLibrary.Models
@inject IMongoUserData userData
@*Use the @inject with Interfaces to implement them into the profile page*@
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@*@inject IMongoUserData userData*@




<h1 class="page-heading text-uppercase mb-4"> My Profile</h1>

<div class="row">
    <div class="col-12">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>


<div class="form-layout">
    <h2 class="my-submission-heading">
        My Account
    </h2>
    <p class="my-submission-text">
        <a hred="MicrosoftIdentity/Account/EditProfile">
        Edit My Profile    
        </a>
    </p>
</div>

<div>
    @if(!(userData == null))
    {
        <div>
        <p>
            This is where things about the user will be located!
        </p>
        </div>
    }
</div>


@*follow the example above in order to put new resources onto the page for the user.*@


@*<h3>Profile</h3>
<section class="vh-100" style="background-color: #f4f5f7;">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col col-lg-6 mb-4 mb-lg-0">
                <div class="card mb-3" style="border-radius: .5rem;">
                    <div class="row g-0">
                        <div class="col-md-4 gradient-custom text-center text-white"
                             style="border-top-left-radius: .5rem; border-bottom-left-radius: .5rem;">
                            <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava1-bg.webp"
                                 alt="Avatar" class="img-fluid my-5" style="width: 80px;" />
                            <h5>Marie Horwitz</h5>
                            <p>Web Designer</p>
                            <i class="far fa-edit mb-5"></i>
                        </div>
                        <div class="col-md-8">
                            <div class="card-body p-4">
                                <h6>Information</h6>
                                <hr class="mt-0 mb-4">
                                <div class="row pt-1">
                                    <div class="col-6 mb-3">
                                        <h6>Email</h6>
                                        <p class="text-muted">info@example.com</p>
                                    </div>
                                    <div class="col-6 mb-3">
                                        <h6>Phone</h6>
                                        <p class="text-muted">123 456 789</p>
                                    </div>
                                </div>
                                <h6>Projects</h6>
                                <hr class="mt-0 mb-4">
                                <div class="row pt-1">
                                    <div class="col-6 mb-3">
                                        <h6>Recent</h6>
                                        <p class="text-muted">Lorem ipsum</p>
                                    </div>
                                    <div class="col-6 mb-3">
                                        <h6>Most Viewed</h6>
                                        <p class="text-muted">Dolor sit amet</p>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-start">
                                    <a href="#!"><i class="fab fa-facebook-f fa-lg me-3"></i></a>
                                    <a href="#!"><i class="fab fa-twitter fa-lg me-3"></i></a>
                                    <a href="#!"><i class="fab fa-instagram fa-lg"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>*@


@code {
    private UserModel? loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        //Info about the logged in user can be pulled into here
    }


    

    private async Task CreateGoals()
    {
        ;
    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
@*
DELETE ABOVE EMPTY BLOCK

@code {
    
    private async Task CreateUser()
    {
        var users = await UserData.GetAllUsers();
        if(users?.Count > 0)
        {
            return;
        }
        
        UserModel use = new();
            {
                Id = GetId();//Not sure if this is right
                ObjectIdentifier = GetObjectIdentifier();
                FirstName = GetFirstName();
                LastName = GetLastName();
                DisplayName = GetDisplayName();
                EmailAddress = GetEmailAddress();
                Height = GetHeight();
                Weight = GetWeight();
                DaysToWorkout = "3";
                
            }
    }

}

@code {

    private async Task CreateGoals()
    {
       ;
    }
}
*@