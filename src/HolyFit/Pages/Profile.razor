@page "/Profile"
@attribute [Authorize]
@using HolyFitLibrary.Models
@inject IMongoUserData userData
@*Use the @inject with Interfaces to implement them into the profile page*@
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@*@inject IMongoUserData userData*@




<h1 class="page-heading text-uppercase mb-4"> My Profile</h1>

<div class="row">
    <div class="col-12">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>


<div class="form-layout">
    <h2 class="my-submission-heading">
        My Account
    </h2>
    <p class="my-submission-text">
        <a hred="MicrosoftIdentity/Account/EditProfile">
        Edit My Profile    
        </a>
    </p>
</div>

<div>
    @if(!(userData == null))
    {
        <div>
        <p>
            This is where things about the user will be located!
        </p>
        </div>
    }
</div>



@code {
    private UserModel? loggedInUser;
    private bool NewUser = true;
    protected async override Task OnInitializedAsync()
    {

        //var AllUsers = await userData.GetUsersAsync();

        //loggedInUser = await authProvider.GetAuthenticationStateAsync();

        //foreach(var s in AllUsers)
        //{
        //    if(s.Id == loggedInUser.Id)
        //    {
        //        NewUser = false;
        //    }
        //}
        //if(NewUser == true)
        //{
        //    UserModel newUser = new() { FirstName = loggedInUser.FirstName, LastName = loggedInUser.LastName, DisplayName = loggedInUser.DisplayName, EmailAddress = loggedInUser.EmailAddress 
        //};
            
        //        userData = 
            
        //}
        
        //Info about the logged in user can be pulled into here
    }


    

    private async Task CreateGoals()
    {
        ;
    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
@*
DELETE ABOVE EMPTY BLOCK

@code {
    
    private async Task CreateUser()
    {
        var users = await UserData.GetAllUsers();
        if(users?.Count > 0)
        {
            return;
        }
        
        UserModel use = new();
            {
                Id = GetId();//Not sure if this is right
                ObjectIdentifier = GetObjectIdentifier();
                FirstName = GetFirstName();
                LastName = GetLastName();
                DisplayName = GetDisplayName();
                EmailAddress = GetEmailAddress();
                Height = GetHeight();
                Weight = GetWeight();
                DaysToWorkout = "3";
                
            }
    }

}

@code {

    private async Task CreateGoals()
    {
       ;
    }
}
*@